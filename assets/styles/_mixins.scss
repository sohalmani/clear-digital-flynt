// Shorthands to help writing easier to understand code.

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error 'Cannot divide by 0';
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    'px': 1px,
    'rem': 1rem,
    'em': 1em,
    '%': 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}

@mixin font-face(
  $family,
  $file,
  $weight: 'normal',
  $style: 'normal',
  $woff2: true,
  $base-path: '../assets/fonts/'
) {
  @font-face {
    font-display: swap;
    font-family: $family;
    font-style: unquote($style);
    font-weight: unquote($weight);
    @if $woff2 {
      src: url($base-path+$file+'.woff2') format('woff2'),
        url($base-path+$file+'.woff') format('woff');
    } @else {
      src: url($base-path+$file+'.woff') format('woff');
    }
  }
}

@mixin center(
  $max-width: $container-max-width,
  $padding: $container-padding-mobile
) {
  display: block;
  margin-left: auto;
  margin-right: auto;
  max-width: $max-width;
  padding-left: $padding;
  padding-right: $padding;
}

@mixin reset-content-margins($direction: 'both') {
  @if ($direction == 'both' or $direction == 'top') {
    > :first-child {
      margin-top: 0;
      padding-top: 0;
    }
  }

  @if ($direction == 'both' or $direction == 'bottom') {
    > :last-child {
      margin-bottom: 0;
      padding-bottom: 0;
    }
  }
}

@mixin reset-list {
  display: block;
  list-style: none;
  margin: 0;
  padding: 0;
}

/**
* Grid Mixin
*
* Applies a flexbox grid to a container element. All direct children will be modified to create a column based grid.
*/
@mixin grid(
  $columns,
  $alignment: flex-start,
  $gutter-horizontal: $gutter-width,
  $gutter-vertical: $gutter-width
) {
  display: flex;
  flex-wrap: wrap;
  justify-content: $alignment;
  width: 100%;

  > * {
    width: calc((#{100% / $columns}) -
    (#{$columns - 1} / #{$columns} * #{$gutter-horizontal}));

    &:nth-child(n) {
      margin-right: $gutter-horizontal;
      margin-top: 0;
    }

    &:nth-child(1n + #{$columns + 1}) {
      margin-top: $gutter-vertical;
    }

    &:nth-child(#{$columns}n) {
      margin-right: 0;
    }

    &:last-child {
      margin-right: 0;
    }
  }
}

@mixin reset-grid {
  display: block;

  > * {
    width: auto;

    &:nth-child(n) {
      margin-right: 0;
      margin-top: 0;
    }
  }
}

@mixin row($gutter: null) {
  display: flex;
  flex-wrap: wrap;
  margin-left: if($gutter != null, $gutter, $gutter-width * -1);
  margin-right: if($gutter != null, $gutter, $gutter-width * -1);

  @media (min-width: $breakpoint-tablet) {
    margin-left: if($gutter != null, $gutter, $gutter-width-tablet * -1);
    margin-right: if($gutter != null, $gutter, $gutter-width-tablet * -1);
  }

  @media (min-width: $breakpoint-desktop) {
    margin-left: if($gutter != null, $gutter, $gutter-width-desktop * -1);
    margin-right: if($gutter != null, $gutter, $gutter-width-desktop * -1);
  }

  > * {
    padding-left: if($gutter != null, $gutter, $gutter-width);
    padding-right: if($gutter != null, $gutter, $gutter-width);

    @media (min-width: $breakpoint-tablet) {
      padding-left: if($gutter != null, $gutter, $gutter-width-tablet);
      padding-right: if($gutter != null, $gutter, $gutter-width-tablet);
    }

    @media (min-width: $breakpoint-tablet) {
      padding-left: if($gutter != null, $gutter, $gutter-width-desktop);
      padding-right: if($gutter != null, $gutter, $gutter-width-desktop);
    }
  }
}

@mixin col($size: false, $columns: 12) {
  @if $size {
    @if $size == auto {
      flex: 0 0 auto;
      max-width: 100%; // Reset earlier grid tiers
      width: auto;
    } @else if $size == 0 {
      @warn 'Number of columns cannot be zero.';
    } @else if $size > $columns {
      @warn 'Number of columns cannot exceed the total number of specified grid columns.';
    } @else {
      flex: 0 0 percentage(divide($size, $columns));
      // Add a `max-width` to ensure content within each column does not blow out
      // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
      // do not appear to require this.
      max-width: percentage(divide($size, $columns));
      width: 100%;
    }
  } @else {
    // Flexible column with remaining space
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
    width: 100%;
  }
}

@mixin offset($size, $columns: 12) {
  @if $size == 0 {
    @warn '';
  } @else if $size >= $columns {
    @warn 'Offsetting by the width of an entire row isn\'t possible.';
  } @else {
    $num: divide($size, $columns);
    margin-left: if($num == 0, 0, percentage($num));
  }
}

@mixin row-cols($count, $columns: 12) {
  @if $count == 0 {
    @warn '';
  } @else if $count > $columns {
    @warn 'Number of columns cannot exceed the total number of specified grid columns.';
  } @else {
    > * {
      flex: 0 0 divide(100%, $count);
      max-width: divide(100%, $count);
    }
  }
}

@mixin spacing(
  $size: 'medium',
  $properties: margin-top,
  $negative: false
) {
  $valid-properties: (
    margin, margin-top, margin-bottom, margin-left, margin-right,
    padding, padding-top, padding-bottom, padding-left, padding-right
  );

  @if type-of($properties) == 'string' {
    $properties: append((), $properties);
  }

  @each $property in $properties {
    @if str-index($property, 'padding') {
      $negative: false;
    }

    @if index($valid-properties, $property) {
      $value: $spacing-medium;

      @if $size == large {
        $value: $spacing-large;
      } @else if $size == small {
        $value: $spacing-small;
      }

      #{$property}: if($negative, $value * -1, $value);

      @media (min-width: $breakpoint-tablet) {
        $value: $spacing-medium-tablet;

        @if $size == large {
          $value: $spacing-large-tablet;
        } @else if $size == small {
          $value: $spacing-small-tablet;
        }

        #{$property}: if($negative, $value * -1, $value);
      }

      @media (min-width: $breakpoint-desktop) {
        $value: $spacing-medium-desktop;

        @if $size == large {
          $value: $spacing-large-desktop;
        } @else if $size == small {
          $value: $spacing-small-desktop;
        }

        #{$property}: if($negative, $value * -1, $value);
      }
    } @else {
      @warn 'Invalid property value! Use only "margin" or "padding" properties.';
    }
  }
}

@mixin typography-eyebrow() {
  display: block;
  font-size: 2rem;
  font-style: normal;
  font-weight: 400;
  letter-spacing: 0;
  line-height: 1.3;
  margin-bottom: 1.5rem;
  margin-top: 0;

  @media (min-width: $breakpoint-tablet) {
    font-size: 2.5rem;
    margin-bottom: 2rem;
  }
}

@mixin typography-blurb() {
  font-size: 1.8rem;
  font-style: normal;
  font-weight: 400;
  letter-spacing: 0;
  line-height: 1.3;
  margin-bottom: 0;
  margin-top: 1.5rem;

  @media (min-width: $breakpoint-tablet) {
    font-size: 2rem;
    margin-top: 2rem;
  }
}
